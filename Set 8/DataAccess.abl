MODULE DataAccess
TITLE 'Data Address Unit'

" Description:  This file demonstrates a bus-based data address unit. 
"				This is Kemal Pulungan's submission for EE10a Set 8.
"
" Inputs:       Accum7..Accum0	  - 13-bit accumulator address
"		        Offset7..Offset0  - 8-bit data offset input
"
"               PrePostSel  - Selects whether to increment before (1) or after (0) adding to offset
"               IncDecSel   - Selects whether to increment (0) or decrement (1)
"               AddendSel   - Selects whether to add to register 0 (0) or Offset (1)
"               SXSel2      - Bit 2 of selecting between 0 (00), X (01), S (10), or Accumulator (11)
"               SXSel1      - Bit 1 of selecting between 0 (00), X (01), S (10), or Accumulator (11)
"               XUpdateSel  - Selects whether to update (1) X or not (0)
"               SUpdateSel  - Selects whether to update (1) S or not (0)
"
"               Reset       - Resets values in accumulator with clock cycle
"               Clock       - Cycles the clock
"
" Outputs:      DataAddr7..DataAddr0 - 8-bit data output to accumulator
"				XReg7..XReg0		 - 8-bit X-register
"				SReg7..SReg0		 - 8-bit S-register


" Revision History:
" 2023-03-03   Kemal Pulungan  Initial code with increment code and inputs/outputs
" 2023-03-04   Kemal Pulungan  Added X and S register code, DataAddress adder
" 2023-03-06   Kemal Pulungan  Fixed X and S register update

"TODO 2023-03-04 21:13 FIGURE OUT HOW STORING STUFF WORKS AND CHANGE THE BELOW COMMENT
" Control signals and Operations
" Operation:         IncBySel:  PrePostSel:  IncDecSel:  AddendSel:  SXSel2,1:  XUpdateSel:  SUpdateSel:
" Direct Address        0           0            0          1          00           0            0
"  (STD/LDD)
"
"With offset:
"LD (pre inc) from X    1           1            0          1          01           1            0
"LD (pre inc) from S    1           1            0          1          10           0            1
"LD (pre dec) from X    1           1            1          1          01           1            0
"LD (pre dec) from S    1           1            1          1          10           0            1
"LD (normal) from X     0          any           0          1          01           0            0
"LD (normal) from S     0          any           0          1          10           0            0
"LD (post inc) from X   1           0            0          1          01           1            0
"LD (post inc) from S   1           0            0          1          10           0            1
"LD (post dec) from X   1           0            1          1          01           1            0
"LD (post dec) from S   1           0            1          1          10           0            1
"
"ST (pre inc) to X      1           1            0          1          01           1            0
"ST (pre inc) to S      1           1            0          1          10           0            1
"ST (pre dec) to X      1           1            1          1          01           1            0
"ST (pre dec) to S      1           1            1          1          10           0            1
"ST (normal) to X       0          any           0          1          01           0            0
"ST (normal) to S       0          any           0          1          10           0            0
"ST (post inc) from X   1           0            0          1          01           1            0
"ST (post inc) from S   1           0            0          1          10           0            1
"ST (post dec) from X   1           0            1          1          01           1            0
"ST (post dec) from S   1           0            1          1          10           0            1
"
"Without offset:
"LD (pre inc) from X    1           1            0          0          01           1            0
"LD (pre inc) from S    1           1            0          0          10           0            1
"LD (pre dec) from X    1           1            1          0          01           1            0
"LD (pre dec) from S    1           1            1          0          10           0            1
"LD (normal) from X     0          any           0          0          01           0            0
"LD (normal) from S     0          any           0          0          10           0            0
"LD (post inc) from X   1           0            0          0          01           1            0
"LD (post inc) from S   1           0            0          0          10           0            1
"LD (post dec) from X   1           0            1          0          01           1            0
"LD (post dec) from S   1           0            1          0          10           0            1
"
"ST (pre inc) to X      1           1            0          0          01           1            0
"ST (pre inc) to S      1           1            0          0          10           0            1
"ST (pre dec) to X      1           1            1          0          01           1            0
"ST (pre dec) to S      1           1            1          0          10           0            1
"ST (normal) to X       0          any           0          0          01           0            0
"ST (normal) to S       0          any           0          0          10           0            0
"ST (post inc) from X   1           0            0          0          01           1            0
"ST (post inc) from S   1           0            0          0          10           0            1
"ST (post dec) from X   1           0            1          0          01           1            0
"ST (post dec) from S   1           0            1          0          10           0            1


" Pin/Signal Declarations

" Inputs

Accum7..Accum0		pin;	"accumulator address
Offset7..Offset0	pin;	"offset input

IncDecSel           pin;    "Selects whether to increment or decrement
AddendSel           pin;    "Selects whether addend is 0 or offset
SXSel1              pin;    "Bit 1 of selecting whether X, S, 0 or accumulator is sent to pre/post mux
SXSel2              pin;    "Bit 1 of selecting whether X, S, 0 or accumulator is sent to pre/post mux
XUpdateSel          pin;    "Selects whether to update X register or keep it
SUpdateSel          pin;    "Selects whether to update S register or keep it
PrePostSel          pin;    "Selects whether pre- or post-increment/decrement

Reset			    pin;	"input system reset
Clock			    pin;	"input system clock


" Outputs

DataAddr7..DataAddr0	pin;	        "data address output
XReg7..XReg0		pin ISTYPE 'REG, KEEP';		"X-register
SReg7..SReg0		pin ISTYPE 'REG, KEEP';		"S-register



" Constants

ZERO = [0, 0, 0, 0, 0, 0, 0, 0];	"8-bit zero
ONE = [1, 1, 1, 1, 1, 1, 1, 1];		"8-bit one
INC = [0, 0, 0, 0, 0, 0, 0, 1];	    "8-bit value to increment/decrement by


" Intermediate Terms

IncOut7..IncOut0        node;    "output of the incrementer
MuxSX7..MuxSX0          node;    "Output of mux picking S or X register
Addend7..Addend0        node;    "Output of mux picking 0 or offset
PrePost7..PrePost0      node;    "Pre/Post mux picking whether pre- or post-increment
IncCar8..IncCar0        node;    "Carry values for adding for incrementing/decrementing
Carry8..Carry0          node;    "Carry values for adding offset and X/S
Adder7..Adder0          node;    "Stores value to be placed in Data Address before clock cycle


" Busses/Vectors

Accum = [Accum7..Accum0];		        "accumulator address input bus
Offset = [Offset7..Offset0];	        "offset input bus
DataAddr = [DataAddr7..DataAddr0];		"Data address output
XReg = [XReg7..XReg0];			        "X-register output bus
SReg = [SReg7..SReg0];			        "S-register output bus

IncOut = [IncOut7..IncOut0];        "output of the incrementer bus
MuxSX = [MuxSX7..MuxSX0];           "output of the S/X selector bus
Addend = [Addend7..Addend0];        "output of the 0 or offset selector bus
PrePost = [PrePost7..PrePost0];     "output of the pre-/post-increment mux bus
IncCar = [IncCar7..IncCar0, !IncDecSel];     "carry values for increment output bus
                                            "Because it can subtract, we have IncDecSel as first carry
Carry = [Carry7..Carry0, 0];           "Carry values for adding offset and X/S bus
Adder = [Adder7..Adder0];           "Stores value to be placed in Data Address before clock cycle bus



EQUATIONS

" At the press of Clock, the clock will cycle
XReg.CLK = Clock;
SReg.CLK = Clock;
XReg.CLR = !Reset;
SReg.CLR = !Reset;

Addend = (ZERO & !AddendSel) #  "Adds 0 to whatever register is selected
         (Offset & AddendSel);  "Adds Offset to whatever register is selected

MuxSX = (ZERO & !SXSel2 & !SXSel1) #    "Zero
        (XReg & !SXSel2 & SXSel1) #     "X register
        (SReg & SXSel2 & !SXSel1) #     "S register
        (Accum & SXSel2 & SXSel1);     "Accumulator

IncOut = MuxSX $ IncDecSel $ IncCar[7..0];
IncCar[8..1] = (MuxSX & IncDecSel) # (IncCar[7..0] & (MuxSX $ IncDecSel));

XReg := (XReg & !XUpdateSel) #        "Sets X to self
          (IncOut & XUpdateSel);     "Sets X to increment/decrement output

SReg := (SReg & !SUpdateSel) #        "Sets S to self
          (IncOut & SUpdateSel);     "Sets S to increment/decrement output

PrePost = (MuxSX & !PrePostSel) #       "Post-add increment
          (IncOut & PrePostSel);        "Pre-add increment

DataAddr = PrePost $ Addend $ Carry[7..0];
Carry[8..1] = (PrePost & Addend) # (Carry[7..0] & (PrePost $ Addend));

END DataAccess
