zMODULE CU
TITLE      'Control Unit'

" Description:  This file demonstrates a bus-based control unit. 
"               This is Kemal Pulungan's submission for EE10a Set 9
"
" Inputs:       IR[15..0]   - Instruction Bus
"               Flags[7..0] - Flags from ALU
"               Reset       - Resets values in accumulator with clock cycle
"               Clock       - Cycles the clock
"
" Outputs:                Program Access Unit control signals:
"               PAUSel2            - highest bit of Program Address Unit control
"               PAUSel1            - middle bit of Program Address Unit control
"               PAUSel0            - lowest bit of Program Address Unit control
"               PAULoad            - load condition of Program Address Unit
"
"                         Arithmetic Logic Unit control signals:
"               ALUSel21           - ALU carry in condition
"               ALUSel20           - ALU select to pass Adder or 0 to Accumulator
"               ALUSel19           - ALU F Block bit 3
"               ALUSel18           - ALU F Block bit 2
"               ALUSel17           - ALU F Block bit 1
"               ALUSel16           - ALU F Block bit 0
"               ALUCarryIn1        - ALU selector bit 1 for carry in control
"               ALUCarryIn0        - ALU selector bit 0 for carry in control
"               ALUSubtrSel        - ALU for subtracting (high) or not (low)
"               ALUAccumSel        - ALU selector whether shift/rotate or adder is accumulator
"               ALUFreezeAccum     - ALU freezes accumulator
"               ALULoadFlags       - ALU Selector for POPF (directly loading flags)
"               ALUChangeSZ        - ALU Selector for whether operation changes Zero and Sign
"               ALUChangeCV        - ALU Selector for whether operation changes Carry and Overflow
"
"                          Data Access Unit control signals:
"               DAUPrePostSel      - DAU pre or post incrememt selector
"               DAUIncDecSel       - DAU incrememt or decrement selector
"               DAUAddendSel       - DAU add registor or offset selector
"               DAUSXSel2          - DAU high bit of Accumulator, S, X, 0 selector
"               DAUSXSel1          - DAU low bit of Accumulator, S, X, 0 selector
"               DAUXUpdateSel      - DAU selects whether we are changing X
"               DAUSUpdateSel      - DAU selects whether we are changing X
"
"               RD		- Read signal
"               WR		- Write signal
"               IO		- Input/Output signal
"
"               DataOffset[7..0]       - Lower 8 bits of Instruction Register (for general offset)
"               JMP[12..0]   - Lower 12 bits of Instruction Register (for jumps)
"               
"               DDBMux1       - Data Data Bus multiplexer control signal bit 1
"               DDBMux0       - Data Data Bus multiplexer control signal bit 0
"               ALUMux        - ALU input multiplexer control signal
"               PAUMux        - PAU input multiplexer control signal
"               
"               For Finite State Machine:
"               Cycle         - Tells multi-clock instruction when to stop
"               CallSig       - Tells FSM if instruction is CALL
"               RtsSig        - Tells FSM if instruction is RTS


" Revision History:
" 2023-03-11   Kemal Pulungan  Initial code
" 2023-03-16   Kemal Pulungan  F block completed, along with everything else
" 2023-03-17   Kemal Pulungan  Added ALU instruction affects to DAU controls
" 2023-03-18   Kemal Pulungan  Changed direct jump name
" 2023-03-19   Kemal Pulungan  Added finite state machine


" Pin/Signal Declarations

" Inputs

ProgramDB15..ProgramDB0  pin;     "instruction input by program data
Flags7..Flags0      pin;        "Flags
Reset               pin;        "reset
Clock               pin;        "clock cycle


" Outputs
"General:
DataOffset7..DataOffset0 pin;   "Lower 8 bits of Instruction Register (for general offset)
JMP12..JMP0 pin;    "Lower 12 bits of Instruction Register (for jumps)
RD              pin;            "Set to 1 for reading from memory
WR              pin;            "Set to 1 for writing to memory

" Program Access Unit
PAUSel2         pin;    "highest bit of Program Address Unit control
PAUSel1         pin;    "middle bit of Program Address Unit control
PAUSel0         pin;    "lowest bit of Program Address Unit control
PAULoad         pin;    "load condition of Program Address Unit

" Arithmetic Logic Unit control signals:
ALUSel21        pin;    "ALU carry in condition
ALUSel20        pin;    "ALU select to pass Adder or 0 to Accumulator
ALUSel19        pin;    "ALU F Block bit 3
ALUSel18        pin;    "ALU F Block bit 2
ALUSel17        pin;    "ALU F Block bit 1
ALUSel16        pin;    "ALU F Block bit 0
ALUCarryIn1     pin;    "ALU selector bit 1 for carry in control
ALUCarryIn0     pin;    "ALU selector bit 0 for carry in control
ALUSubtrSel     pin;    "ALU for subtracting (high) or not (low)
ALUAccumSel     pin;    "ALU selector whether shift/rotate or adder is accumulator
ALUFreezeAccum  pin;    "ALU freezes accumulator
ALULoadFlags    pin;    "ALU Selector for POPF (directly loading flags)
ALUChangeSZ     pin;    "ALU Selector for whether operation changes Zero and Sign
ALUChangeCV     pin;    "ALU Selector for whether operation changes Carry and Overflow

" Data Access Unit control signals:
DAUPrePostSel   pin;    "DAU pre or post incrememt selector
DAUIncDecSel    pin;    "DAU incrememt or decrement selector
DAUAddendSel    pin;    "DAU add registor or offset selector
DAUSXSel2       pin;    "DAU high bit of Accumulator, S, X, 0 selector
DAUSXSel1       pin;    "DAU low bit of Accumulator, S, X, 0 selector
DAUXUpdateSel   pin;    "DAU selects whether we are changing X
DAUSUpdateSel   pin;    "DAU selects whether we are changing X

" Read/Write condition
RD          pin;    "output  read signal for the Data data bus
WR          pin;    "output  write signal for the Data data bus

" Controls for CPU muxes
"DataDB
"00 for ST/STI/STD, 01 for PUSHF, 10 for lower 8, 11 for upper 5 (CALL)
DDBMux1   pin;
DDBMux0   pin;

"ALU Data
"0 for X+o, S+o, or (m), 1 for immediate addressing 
ALUMux    pin;

"PAU Data
"0  for offset, 1 for RTS (from DDB)
PAUMux    pin;

"FSM bits
CallSig pin ISTYPE 'reg';     "Tells FSM if instruction is CALL
RtsSig  pin ISTYPE 'reg';     "Tells FSM if instruction is RTS

"FSM state bits
StateBits = [CallSig, RtsSig];

"states
Single = [0, 0];          "For all non-CALL and non-RTS instructions
Call1 = [1, 0];           "First CALL clock cycle after getting instruction
                                "predecrement S, store upper 5 to S (ST to S predec)
                                "Can only go to next CALL clock cycle
Call2 = [1, 0];           "Second CALL clock cycle
                                "predecrement S, store lower 8 to S (ST to S predec)
                                "Can only go to next CALL clock cycle
Call3 = [1, 0];           "Third CALL clock cycle
                                "JMP to instruction address, set CallSig to 0
                                "Can only go to Single
Rts1 = [0, 1];            "First RTS clock cycle after getting instruction
                                "post-dec LD lower 8 from S to PC
                                "Can only go to next RTS clock cycle
Rts2 = [0, 1];            "Second RTS clock cycle after getting instruction
                                "post-dec LD upper 5 from S to PC
                                "Can only go to Single




"Offset and direct Jump address
DataOffset7..DataOffset0    pin;      "Lower 8 bits for regular data offset
JMP12..JMP0     pin;      "Lower 12 bits for direct address jumps

" Intermediate values
IR15..IR0   node ISTYPE 'REG, KEEP';    "Instruction Register
FI  node;       "Holds Global Interrupt Enable/Disable flag
F6  node;       "Holds 6th bit of Flag register
FU  node;       "Holds user bit used by STU and CLU instructions flag
F4  node;       "Holds 4th bit of Flag register
FC  node;       "Holds Carry (carry out of bit 7) flag
FV  node;       "Holds Signed Overflow flag
FS  node;       "Holds Sign flag
FZ  node;       "Holds Zero flag

JmpCase0  node;     "Holds conditions fulfilled by JA, JNS, JNV, JL
JmpCase1  node;     "Holds conditions fulfilled by JBE, JS, JV, JGE
JmpCase2  node;     "Holds conditions fulfilled by JAE/JNC, JNE/JNZ, JLE, JNU
JmpCase3  node;     "Holds conditions fulfilled by JB/JC, JE/JZ, JG, JU


" Busses/Vectors
ProgramDB = [ProgramDB15..ProgramDB0];    "Program Data Bus
IR = [IR15..IR0];               "Instruction Register Bus
Flags = [Flags7..Flags0];       "Flags

" Offsets for data and direct jumps
DataOffset = [DataOffset7..DataOffset0];        "Lower 8 bits for regular data offset
JMP = [JMP12..JMP0];          "Lower 12 bits for direct address jumps


EQUATIONS

" IR = ProgramDB
IR := ProgramDB;

DataOffset = [IR7..IR0];        "Lower 8 bits for regular data offset
JMP = [IR12..IR0];        "Lower 12 bits for direct address jumps

" At the press of Clock, the clock will cycle
IR.CLK = Clock;
IR.CLR = Reset;

StateBits.CLK = Clock;
StateBits.CLR = Reset;

STATE_DIAGRAM StateBits       "Moore state machine

STATE Single:
     IF (CallSig) THEN Call1
     ESLE IF (RtsSig) THEN Rts1
     ELSE Single;

STATE Call1:
     GOTO Call2;

STATE Call2:
     GOTO Call3;

STATE Call3:
     GOTO Single;

STATE Rts1:
     GOTO Rts2;

STATE Rts2:
     GOTO Single;

CallSig = (IR15 & IR14 & IR13);        "CALL
RtsSig = (!IR15 & !IR14 & !IR13 & IR12 & IR11 & IR10 & IR9 & !IR8);    "RTS


" Flags set
FI = Flags7;        "Holds Global Interrupt Enable/Disable flag
F6 = Flags6;        "Holds 6th bit of Flag register
FU = Flags5;        "Holds user bit used by STU and CLU instructions flag
F4 = Flags4;        "Holds 4th bit of Flag register
FC = Flags3;        "Holds Carry (carry out of bit 7) flag
FV = Flags2;        "Holds Signed Overflow flag
FS = Flags1;        "Holds Sign flag
FZ = Flags0;        "Holds Zero flag

"DataDB Mux condition
DDBMux1 = (IR15 & IR14 & IR13);    "1 for CALL
DDBMux0 = (!IR15 & !IR14 & !IR13 & !IR12 & IR11 & IR10 & IR9 & !IR8);     "1 for PUSHF
                                                                          "what about upper 5?

"ALUMux
"0 for X+o, S+o, or (m), 1 for immediate addressing 
ALUMux = (!IR15 & IR9 & IR8);        "1 when direct addressing for ALU ops (9,8=11 for direct)

"PAUMux
"0  for offset, 1 for RTS (from DDB)
PAUMux = (!IR15 & !IR14 & !IR13 & IR12 & IR11 & IR10 & IR9 & !IR8);    "RTS


"Jump Condition calculations
JmpCase0 = ((!FC & !FZ) # !FS # !FV # (FS $ FV));   "conditions fulfilled by JA, JNS, JNV, JL
JmpCase1 = ((FC # FZ) # FS # FV # !(FS $ FV));      "conditions fulfilled by JBE, JS, JV, JGE
JmpCase2 = (!FC # !FZ # ((FS $ FV) # FZ) # !FU);    "conditions fulfilled by JAE/JNC, JNE/JNZ, JLE, JNU
JmpCase3 = (FC # FZ # (!(FS $ FV) & !FZ) # FU);     "conditions fulfilled by JB/JC, JE/JZ, JG, JU


"RD condition
RD = (!IR15 & !(IR9 & IR8)) #    "RD=1 when not direct addressing for ALU ops (9,8=11 for direct)
     !(!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) #   "RD=0 for INC
     !(!IR15 & IR14 & !IR13 & IR12) #         "RD=0 for LSL, RLC
     !(!IR15 & !IR14 & IR13 & !IR12 & IR11)#  "RD=0 for NOT
     (IR15 & !IR14 & !IR13) #    "RD=1 for LD, LDI, LDD
     (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & IR9 & !IR8) #     "POPF
     (RtsSig & (Rts1 # Rts2));

"WR condition 1 only when store instruction or PUSHF
WR = (IR15 & !IR14 & IR13) #     "ST and STD
     (!IR15 & !IR14 & !IR13 & !IR12 & IR11 & IR10 & IR9 & !IR8) #     "PUSHF
     (CallSig & (Call1 # Call2));




" Program Access Unit control signal calculation
" For all instructions except jumps, true condition jumps, CALL, RTS PAUSel2,1,0 will be 000

"only 1 if RTS, to change PC in different pieces
PAUSel2 = (!IR15 & !IR14 & !IR13 & IR12 & IR11 & IR10 & IR9 & !IR8);    "RTS

"JMP and jump conditions being met makes PAUSel1 1
PAUSel1 = (IR15 & IR11 & !IR10 & !IR9 & !IR8 & JmpCase0) #  "JA, JNS, JNV, JL
          (IR15 & IR11 & !IR10 & IR9 & IR8 & JmpCase1) #      "JBE, JS, JV, JGE
          (IR15 & IR11 & IR10 & !IR9 & !IR8 & JmpCase2) #     "JAE/JNC, JNE/JNZ, JLE, JNU
          (IR15 & IR11 & IR10 & IR9 & IR8 & JmpCase3) #     "JB/JC, JE/JZ, JG, JU
          (IR15 & IR14 & !IR13 & !IR12) #   "JMP
          (IR15 & IR14 & !IR13 & IR12) #      "JMP
          (CallSig & Cal3);       "CALL final clock

"With set 9, PAUSel0 turns 1 with any offset jumps and freezing PC
PAUSel0 = (IR15 & IR11 & !IR10 & !IR9 & !IR8 & JmpCase0) #  "JA, JNS, JNV, JL
          (IR15 & IR11 & !IR10 & IR9 & IR8 & JmpCase1) #        "JBE, JS, JV, JGE
          (IR15 & IR11 & IR10 & !IR9 & !IR8 & JmpCase2) #       "JAE/JNC, JNE/JNZ, JLE, JNU
          (IR15 & IR11 & IR10 & IR9 & IR8 & JmpCase3) #      "JB/JC, JE/JZ, JG, JU
          (CallSig & (Call1 # Call2)) #              "CALL
          !(RtsSig & Rts2) #       "RTS second clock cycle after receiving instruction (load upper 8)
          (RtsSig & Rts1);         "RTS first clock cycle after receiving instruction (load lower 8)

"Load must be set to 1 for direct jump (JMP)
PAULoad = (IR15 & IR14 & !IR13) #         "JMP
          (RtsSig & Rts1);        "RTS first clock cycle after receiving instruction (load lower 8)



" Arithmetic Logic Unit control signal calculation

" F Block
"ALU F Block bit 3 follows instruction bit 14 except loading
ALUSel19 = (!IR15 & IR14) #   "Anything not loading
           (IR15 & !IR14 & !IR13 & !IR12 & IR11 & !IR10 & !IR9 & IR8) #   "LDI
           (IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8);  "LDD

"ALU F Block bit 2 follows instruction bit 12, and when loading bit 2 is 0
ALUSel18 = (!IR15 & IR12) #   "Anything not loading
          !(IR15 & !IR14 & !IR13 & !IR12 & IR11 & !IR10 & !IR9 & IR8) #   "LDI
          !(IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8);  "LDD

"ALU F Block bit 1 follows instruction bit 13, except loading (1) and CMP (0)
ALUSel17 = (!IR15 & IR13) #   "Anything not loading
           (IR15 & !IR14 & !IR13 & !IR12 & IR11 & !IR10 & !IR9 & IR8) #   "LDI
           (IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) # "LDD
          !(!IR15 & !IR14 & IR13 & IR12 & !IR10);  "CMP

"ALU F Block bit 0 is 1 when SUB, SBB, NOT, DEC, CMP
ALUSel16 = (!IR15 & !IR14 & !IR13 & IR12) #        "SUB/SBB
           (!IR15 & !IR14 & IR13 & !IR12 & IR11) # "NOT
           (!IR15 & IR14 & IR13 & IR12 & IR11) #   "DEC
           (!IR15 & !IR14 & IR13 & IR12 & !IR10);  "CMP


"ALU Carry bit 1
ALUCarryIn1 = (!IR15 & IR14 & IR13 & !IR12 & !IR11) #   "ADC
              (!IR15 & !IR14 & !IR13 & IR12 & IT11) #   "SBB
              (!IR15 & !IR14 & IR13 & !IR12 & IR11 & IR10 & !IR9 & IR8) #   "NOT
              (!IR15 & IR14 & !IR13 & IR12 & !IR11);    "RLC

"ALU Carry bit 0
ALUCarryIn0 = (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) #   "INC
              (!IR15 & !IR14 & IR13 & IR12 & !IR10) #   "CMP
              (!IR15 & !IR14 & !IR13 & IR12);           "SBB/SUB


" only turned 0 by LSL, RLC, POPF
ALUAccumSel = !((!IR15 & IR14 & !IR13 & IR12) #     "LSL, RLC
                (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & IR9 & !IR8));  "POPF


" Selects whether to carry in
" only turned 1 by INC and DEC
ALUSel21 = (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) #  "INC
           (!IR15 & IR14 & IR13 & IR12 & IR11 & !IR10 & IR9 & IR8);         "DEC


" Selects whether to pass Accumulator or 0 to Adder
ALUSel20 = (!IR15 & IR14 & IR13 & !IR12) #   "ADD/ADC
           (!IR15 & !IR14 & !IR13 & IR12) #   "SUB/SBB
           (!IR15 & IR14 & IR13 & IR12 & IR11) #   "DEC
           (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) #  "INC
           (!IR15 & !IR14 & IR13 & IR12 & !IR10);  "CMP


" only set to 0 by NOT, XOR, AND, OR, TST, POPF
ALUChangeCV = !((!IR15 & !IR14 & IR13 & !IR12 & IR11 & IR10 & !IR9 & IR8) #     "NOT
                (!IR15 & !IR14 & IR13 & IR12 & !IR11 & IR10) #      "XOR
                (!IR15 & IR14 & !IR13 & !IR12 & !IR11 & IR10) #     "AND
                (!IR15 & IR14 & IR13 & IR12 & !IR11 & IR10) #       "OR
                (!IR15 & IR14 & !IR13 & !IR12 & IR11 & IR10) #      "TST
                (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & IR9 & !IR8));  "POPF


" always 1 except load
ALUChangeSZ = !IR15;


" indicates when subtracting
ALUSubtrSel = (!IR15 & !IR14 & !IR13 & IR12) #   "SUB/SBB
              (!IR15 & IR14 & IR13 & IR12 & IR11) #   "DEC
              (!IR15 & !IR14 & IR13 & IR12 & !IR10);  "CMP


" only turned 1 by CMP, TST, POPF
ALUFreezeAccum = (!IR15 & !IR14 & IR13 & IR12 & !IR11 & !IR10) #    "CMP
                 (!IR15 & IR14 & !IR13 & !IR12 & IR11 & IR10) #     "TST
                 (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & IR9 & !IR8);  "POPF


" Enable POPF to happen
ALULoadFlags = (!IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & IR9 & !IR8);    "POPF



" Data Access Unit
"Instruction bit 9 indicates if offset instruction is being done
" Tells to increment/decrement by 1 (1) or 0 (0). Only 0 when "normal" and LDD/LDI/STD
DAUIncBySel = (IR15 & IR9 & !IR8) #   "1 whenever Load/Store offset operation 
                                      "(15 is 1, 9 is 1) and bit 8 is 0
             !(IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) #   "0 for LDD
             !(IR15 & !IR14 & !IR13 & !IR12 & IR11 & !IR10 & !IR9 & IR8) #   "0 for LDI
             !(IR15 & !IR14 & IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) #  "0 for STD
             !(!IR15)  "0 for any ALU operations
             (CallSig # RtsSig);        "RTS or CALL

"1 when pre-increment
DAUPrePostSel = (IR15 & !IR12 & IR9) #   "1 whenever Load/Store operation and bit 12 is 0
                (!IR15)    "1 for ALU operations
                (CallSig & (Call1 # Call2));      "First 2 clocks of CALL after receiving instruction

"1 when decrementing (bit 11 is 1, bit 9 is 1)
DAUIncDecSel = (IR15 & IR11 & IR9)
               (CallSig & (Call1 # Call2));       "First 2 clocks of CALL after receiving instruction

"0 whenever LDD, LDI, STD
DAUAddendSel = !(IR15 & !IR14 & !IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8) #   "0 for LDD
               !(IR15 & !IR14 & !IR13 & !IR12 & IR11 & !IR10 & !IR9 & IR8) #   "0 for LDI
               !(IR15 & !IR14 & IR13 & !IR12 & !IR11 & !IR10 & !IR9 & !IR8);   "0 for STD

"1 whenever S is selected
DAUSXSel2 = (IR15 & !IR10 & IR9) #      "store/load
            (!IR15 & !(!IR14 & !IR13 & !IR12) & IR9 & !IR8)  "any ALU ops with S will have 
                                                    "IR15=0 while IR14 thru 12 cannot be 0
            (CallSig # RtsSig);

"1 whenever X is selected
DAUSXSel1 = (IR15 & IR10 & IR9) #      "store/load
            (!IR15 & !IR9 & IR8);  "any ALU ops with X will have IR15=0, IR9=0, IR8=1

"1 whenever X is selected and store/load with inc/decrement
XUpdateSel = (IR15 & IR10 & IR9);

"1 whenever S is selected and store/load with inc/decrement
SUpdateSel = (IR15 & !IR10 & IR9) # 
             (CallSig # RtsSig);


END CU
